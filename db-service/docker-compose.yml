services:
  api-service:
    image: api-service:latest
    ports:
      - "8080:8080"
    networks:
      - network
  db-service:
    build: /
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: always
    environment:
      - DB_HOST: ${DB_HOST}
      - DB_PORT: ${DB_PORT}
      - DB_USER: ${DB_USER}
      - DB_PASSWORD: ${DB_PASSWORD}
      - DB_NAME: ${DB_NAME}
      - REDIS_ADDR: ${REDIS_ADDR}
    ports:
      - "8282:8282"
    networks:
      - network

  postgres:
    image: postgres:14
    restart: always
    environment:
      - POSTGRES_USER: ${DB_USER}
      - POSTGRES_PASSWORD: ${DB_PASSWORD}
      - POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    networks:
      - network
      
  redis:
    image: redis:7
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    ports:
      - "6379:6379"
    networks:
      - network
networks:
  network:
    driver: bridge